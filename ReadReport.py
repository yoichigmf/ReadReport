# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ReadReport
                                 A QGIS plugin
 Read Excel report file
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-11-22
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Yoichi Kayama
        email                : yoichi.kayama@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction


from qgis.core import *
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .ReadReport_dialog import ReadReportDialog
import os.path

import openpyxl
import os
import time
from datetime import datetime


class ReadReport:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ReadReport_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&ReadReport')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ReadReport', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/ReadReport/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Excelファイル読み込み'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&ReadReport'),
                action)
            self.iface.removeToolBarIcon(action)


     #   return fid of location data nearist  dtime+ user   if not found  return -1
    def SearchNid(self, loclist, dtime, user):
    
        ret = -1
        
        #ds = split( dtime, ' ' )
        
        #dd = split( ds[0], '/' )
        
        #tm = split( ds[1], ':' )
        #dt1 = datetime(int(dd[0], int(dd[1]), int(dd[2]), int(tm[0]),int(tm[1]), int(tm[2]))
        dt1 = datetime.strptime(dtime, '%Y/%m/%d %H:%M:%S')
        
        for rec in loclist:
        
            if rec[0] == user:
                  QgsMessageLog.logMessage("compare "+ dtime + "and " + rec[1] , 'ReadReport', level=Qgis.Info)  

                  dt2 = datetime.strptime(rec[1], '%Y/%m/%d %H:%M:%S')
                  if ret < 0 :
    
                       if dt2 < dt1:
                            cdate = dt2
                            ret = rec[2]
                  else:
                       if cdate  < dt1:
                            dst1 = dt1 - cdate
                            dst2 = dt1 - dt2
                            
                            QgsMessageLog.logMessage("compare "+ dtime + "and " + rec[1] + " dst1:" + str(dst1.total_seconds())+" dst2:"+ str(dst2.total_seconds()), 'ReadReport', level=Qgis.Info)                           
                            
                            if dst2.total_seconds() > 0:
                                 if dst1.total_seconds() > dst2.total_seconds():
                                      cdata = dt2
                                      ret = rec[2] 
                       
                  
        
        return ret
        
        
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ReadReportDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            
          
    
            

            #try:  
            if 1:
              #  selected layer to store
                  tgLayer = self.dlg.mMapLayerComboBox.currentLayer()
            
                  if tgLayer is None:
                       QgsMessageLog.logMessage("error:調査レポートレイヤが指定されていません" , 'ReadReport', level=Qgis.Warning)  
                       self.iface.messageBar().pushMessage("Error", "error:調査レポートレイヤが指定されていません", level=Qgis.Warning)   
                       return
                  
            
                  caps = tgLayer.dataProvider().capabilities()
                  
                  if not caps & QgsVectorDataProvider.AddFeatures:
                       QgsMessageLog.logMessage("error:調査レポートレイヤにデータ追加できません" , 'ReadReport', level=Qgis.Warning)  
                       self.iface.messageBar().pushMessage("Error", "error:調査レポートレイヤにデータ追加できません", level=Qgis.Warning)   
                       return  
                       
                       
                  tgTextLayer = self.dlg.mMapLayerComboBox_2.currentLayer()
            
                  if tgTextLayer is None:
                       QgsMessageLog.logMessage("error:調査レポートレイヤ(テキスト)が指定されていません" , 'ReadReport', level=Qgis.Warning)  
                       self.iface.messageBar().pushMessage("Error", "error:調査レポートレイヤ(テキスト)が指定されていません", level=Qgis.Warning)   
                       return
                  
            
                  caps2 = tgTextLayer.dataProvider().capabilities()
                  
                  if not caps2 & QgsVectorDataProvider.AddFeatures:
                       QgsMessageLog.logMessage("error:調査レポートレイヤ(テキスト)にデータ追加できません" , 'ReadReport', level=Qgis.Warning)  
                       self.iface.messageBar().pushMessage("Error", "error:調査レポートレイヤ(テキスト)にデータ追加できません", level=Qgis.Warning)   
                       return  
                       
                  tgImgLayer = self.dlg.mMapLayerComboBox_3.currentLayer()
            
                  if tgImgLayer is None:
                       QgsMessageLog.logMessage("error:調査レポートレイヤ(イメージ)が指定されていません" , 'ReadReport', level=Qgis.Warning)  
                       self.iface.messageBar().pushMessage("Error", "error:調査レポートレイヤ(イメージ)が指定されていません", level=Qgis.Warning)   
                       return
                  
            
                  caps3 = tgImgLayer.dataProvider().capabilities()
                  
                  if not caps2 & QgsVectorDataProvider.AddFeatures:
                       QgsMessageLog.logMessage("error:調査レポートレイヤ(イメージ)にデータ追加できません" , 'ReadReport', level=Qgis.Warning)  
                       self.iface.messageBar().pushMessage("Error", "error:調査レポートレイヤ(イメージ)にデータ追加できません", level=Qgis.Warning)   
                       return                                                   
                             
                             
                  
                                
                  rdExcel = self.dlg.mQgsFileWidget.filePath()
            
                  if rdExcel is None:
                       QgsMessageLog.logMessage(u"error:Excelファイルが指定されていません" , 'ReadReport', level=Qgis.Warning)  
                       self.iface.messageBar().pushMessage(u"Error", "error:Excelファイルが指定されていません", level=Qgis.Warning)   
                       return
            
                  wb = openpyxl.load_workbook(rdExcel)
            
                  ws = wb.worksheets[0]
                  
                  #   location list
                  loclist = []
            
            #    2行目から取得    location
                  for row in ws.iter_rows(min_row=2):
                       attrs = []
                       for  cell in row:
                            attrs.append(cell.value)
                       

 
                       if attrs[2]  == "location":
                            QgsMessageLog.logMessage("record:" + attrs[0]+ ":" + attrs[1] + ":" + attrs[2], 'ReadReport', level=Qgis.Info)
                
                            feat = QgsFeature(tgLayer.fields())
                            feat.setAttribute(u"日付",attrs[0])
                            feat.setAttribute('user',attrs[1])                        
                            feat.setAttribute(u"住所",attrs[3])                        
                            feat.setAttribute(u"緯度",float(attrs[5]))   
                            feat.setAttribute(u"経度",float(attrs[6]))   
                            
                                                        
                            feat.setAttribute('transact_id',rdExcel)  
                            
                            
                            feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(float(attrs[6]), float(attrs[5]))))
                            (res, outFeats) = tgLayer.dataProvider().addFeatures([feat])
                            
                            location = []
                            
                            if res:
                                 QgsMessageLog.logMessage("record out:" + str(outFeats[0][0])+ ":" + outFeats[0][1], 'ReadReport', level=Qgis.Info)

                                 location.append(outFeats[0][2])  #  user name
                                 location.append(outFeats[0][1])  #   date time
                                 location.append(outFeats[0][0])  #   fid
                                 
                                 loclist.append(location)
                                 
                            else:
                                 QgsMessageLog.logMessage("Error:data write error" , 'ReadReport', level=Qgis.Info)
                                 self.iface.messageBar().pushMessage(u"Error", "error:data write error", level=Qgis.Warning)   

                                 return
                                 
                                 
            #    2行目から取得    location
                  for row in ws.iter_rows(min_row=2):
                       attrs = []
                       for  cell in row:
                            attrs.append(cell.value)
                       

 
                       if attrs[2]  == "text" or attrs[2] == "voice":
                            QgsMessageLog.logMessage("record:" + attrs[0]+ ":" + attrs[1] + ":" + attrs[2], 'ReadReport', level=Qgis.Info)
                
                            feat = QgsFeature(tgTextLayer.fields())
                            
                            nid = self.SearchNid( loclist, attrs[0], attrs[1])
                            
                            if nid > 0:
                                 feat.setAttribute(u"日付",attrs[0])
                            
                                 feat.setAttribute('nid',nid)   
                                 feat.setAttribute('user',attrs[1])                        
                                 feat.setAttribute("kind",attrs[2])                        
                                 feat.setAttribute("rtext",attrs[3])   
   
                            
                                                        
 
                                 (res, outFeats) = tgTextLayer.dataProvider().addFeatures([feat])
                            
                       elif attrs[2]  == "image":
                            QgsMessageLog.logMessage("record:" + attrs[0]+ ":" + attrs[1] + ":" + attrs[2], 'ReadReport', level=Qgis.Info)
                
                            feat = QgsFeature(tgImgLayer.fields())
                            
                            nid = self.SearchNid( loclist, attrs[0], attrs[1])
                            
                            if nid > 0:
                                 feat.setAttribute(u"日付",attrs[0])
                            
                                 feat.setAttribute('nid',nid)   
                                 feat.setAttribute('user',attrs[1])                        
                                 feat.setAttribute("kind",attrs[2])                        
                                 feat.setAttribute("filename",attrs[4])   
   
                            
                                                        
 
                                 (res, outFeats) = tgImgLayer.dataProvider().addFeatures([feat])
                            
                                                
                                 
                                 
                                                                                
            else:              
            #except:  
                  QgsMessageLog.logMessage(u"error:ファイルIOエラー" , 'ReadReport', level=Qgis.Warning)  
                  self.iface.messageBar().pushMessage(u"Error", "error:ファイルIOエラー", level=Qgis.Warning)   
                  return
            
            pass
